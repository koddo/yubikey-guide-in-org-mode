nix-shell -p gnupg procps pcsctools cryptsetup yubikey-manager wget pcsclite
mkdir -p ~/.gnupg && \
echo 'disable-ccid' >> ~/.gnupg/scdaemon.conf && \
echo 'verbose' >> ~/.gnupg/scdaemon.conf && \
echo 'log-file ~/.gnupg/scdaemon.log' >> ~/.gnupg/scdaemon.conf 




podman build -t yubikey-guide-in-docker .
podman run --userns=keep-id --device=/dev/bus/usb --rm -it yubikey-guide-in-docker gpg --card-status

or take exact device from lsusb and use --device=/dev/bus/usb/003/004
when unplugged and plugged again, we have to stop and start the container again with new --device

USB/IP?
https://docs.docker.com/desktop/features/usbip/










copypasted from
https://github.com/drduh/YubiKey-Guide/blob/ece9752967e8b01bb3e70919a8ccdbc252eb9387/README.md

compare sections of files:
https://stackoverflow.com/questions/434766/how-can-i-diff-two-sections-of-the-same-file/2044916#2044916
diff -u <(head -$3 $1 | tail -n +$2) <(head -$5 $1 | tail -n +$4)





emacs readme.org --eval "(setq org-confirm-babel-evaluate nil)"





*** init.el

#+begin_src elisp
#+end_src

            
#+begin_src bash :session test-session 
echo hello

for i in {1 2 3} ; do echo 1 && sleep 1 ; done
#+end_src

#+RESULTS:
: hello



#+begin_src shell :session test-session :epilogue "echo org_babel_sh_eoe"
echo hello
#+end_src

#+RESULTS:
| hello |        |       |      |            |       |        |
| bash: | syntax | error | near | unexpected | token | `done' |



*** prepare gnu

https://github.com/drduh/YubiKey-Guide#prepare-gnupg
https://github.com/drduh/YubiKey-Guide#configuration
TODO: heredoc

#+begin_src shell :session test-session
export GNUPGHOME=$(mktemp -d -t $(date +%Y.%m.%d)-XXXX)
cd $GNUPGHOME

wget https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/config/gpg.conf

touch scdaemon.conf
echo "disable-ccid" >>scdaemon.conf
#+end_src




https://github.com/drduh/YubiKey-Guide#identity
https://github.com/drduh/YubiKey-Guide#key
https://github.com/drduh/YubiKey-Guide#expiration

#+begin_src shell :session test-session :results verbatim
export IDENTITY="YubiKey User <yubikey@example.domain>"
export KEY_TYPE=rsa4096
# export EXPIRATION=2027-05-01
export EXPIRATION=2y

echo all set
#+end_src

#+RESULTS:
: all set





https://github.com/drduh/YubiKey-Guide#passphrase

#+begin_src shell :session test-session
export PASS_GROUPSIZE=6
export PASS_DELIMITER=+
export PASS_LENGTH=48

export CERTIFY_PASS=$(LC_ALL=C tr -dc "A-Z2-9" < /dev/urandom | \
    tr -d "IOUS5" | \
    fold  -w  ${PASS_GROUPSIZE:-4} | \
    paste -sd ${PASS_DELIMITER:--} - | \
    head  -c  ${PASS_LENGTH:-29})

printf "\n$CERTIFY_PASS\n\n"
#+end_src

#+RESULTS:
: GWRBXV+LZHLVQ+BD222D+QPWPRA+X3X2TQ+MDJD6B+PKW3AL





*** create-certify-key

https://github.com/drduh/YubiKey-Guide#create-certify-key

#+begin_src shell :session test-session :results verbatim
echo "$CERTIFY_PASS" | \
    gpg --batch --passphrase-fd 0 \
        --quick-generate-key "$IDENTITY" "$KEY_TYPE" cert never
#+end_src

#+RESULTS:
: gpg: directory '/root/.gnupg' created
: gpg: keybox '/root/.gnupg/pubring.kbx' created
: gpg: /root/.gnupg/trustdb.gpg: trustdb created
: gpg: directory '/root/.gnupg/openpgp-revocs.d' created
: gpg: revocation certificate stored as '/root/.gnupg/openpgp-revocs.d/A47A907531613EB69751CDA18F1236B1F4D992BC.rev'


#+begin_src shell :session test-session :results verbatim
export KEYID=$(gpg -k --with-colons "$IDENTITY" | \
    awk -F: '/^pub:/ { print $5; exit }')

export KEYFP=$(gpg -k --with-colons "$IDENTITY" | \
    awk -F: '/^fpr:/ { print $10; exit }')

printf "\nKey ID: %40s\nKey FP: %40s\n\n" "$KEYID" "$KEYFP"
#+end_src

#+RESULTS:
: gpg: checking the trustdb
: gpg: marginals needed: 3  completes needed: 1  trust model: pgp
: gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
: Key ID:                         8F1236B1F4D992BC
: Key FP: A47A907531613EB69751CDA18F1236B1F4D992BC


diceware



additionaly IDs




*** create-subkeys

https://github.com/drduh/YubiKey-Guide#create-subkeys


#+begin_src shell :session test-session :results verbatim
for SUBKEY in sign encrypt auth ; do \
    echo "$CERTIFY_PASS" | \
    gpg --batch --pinentry-mode=loopback --passphrase-fd 0 \
        --quick-add-key "$KEYFP" "$KEY_TYPE" "$SUBKEY" "$EXPIRATION"
done
#+end_src

#+RESULTS:


*** verify-keys

https://github.com/drduh/YubiKey-Guide#verify-keys



#+begin_src shell :session test-session :results verbatim
gpg -K
#+end_src

#+RESULTS:
: /root/.gnupg/pubring.kbx
: ------------------------
: sec   rsa4096 2025-06-04 [C]
:       A47A907531613EB69751CDA18F1236B1F4D992BC
: uid           [ultimate] YubiKey User <yubikey@example.domain>
: ssb   rsa4096 2025-06-04 [S] [expires: 2027-06-04]
: ssb   rsa4096 2025-06-04 [E] [expires: 2027-06-04]
: ssb   rsa4096 2025-06-04 [A] [expires: 2027-06-04]





*** backup-keys

https://github.com/drduh/YubiKey-Guide#backup-keys

#+begin_src shell :session test-session :results verbatim
echo "$CERTIFY_PASS" | \
    gpg --output $GNUPGHOME/$KEYID-Certify.key \
        --batch --pinentry-mode=loopback --passphrase-fd 0 \
        --armor --export-secret-keys $KEYID

echo "$CERTIFY_PASS" | \
    gpg --output $GNUPGHOME/$KEYID-Subkeys.key \
        --batch --pinentry-mode=loopback --passphrase-fd 0 \
        --armor --export-secret-subkeys $KEYID

gpg --output $GNUPGHOME/$KEYID-$(date +%F).asc \
    --armor --export $KEYID
#+end_src

#+RESULTS:


TBD



*** export-public-key

https://github.com/drduh/YubiKey-Guide#export-public-key

#+begin_src shell :session test-session :results verbatim
# gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc
gpg --armor --export $KEYID | head
#+end_src

#+RESULTS:
: -----BEGIN PGP PUBLIC KEY BLOCK-----
: 
: mQINBGhAJx4BEADrWNQkxsrUdiUGGpWW0vL802zbzhRHw6Py5htMYM7qtbRdC5id
: uBHM3J0WRcyQP8bJHc0okZ2Pea5Lwj5aTZmb+JtWxOgFa61bqSfbgI2+vspBVcRw
: G0ympHLSYYU+rYf9piMjIRiQyOH9MURy/NNeiYv5bSnWuTKFHVKQDmfYHp//0OYU
: 9uS1ntiIOGLb8tDdf/GEIoGtUymIkNwrC7IjeIM76j9ZFfL/E1JJjeDDjEGItwzr
: 6rIP8BEiP1yKiWHTGN3/2ftlt58+oadncLu1u5hSl0JAuZwej/9Dn10fA0WqWyJL
: Gj5Lc/H02LrVOPZxcICVEngwYo+aLMaZxXWeS6mCbwM2BS9GM0P8njQpIH9Sk6rF
: QOtqgFwu8JjTgtGia5SUCRHra24oa4hW+CDi6FyD819f6qEizdTnI86UXbGt84/r
: 5v4pGWAErl2zekx4UyOTFnbrnXiRIDtcQ0de0BaHtJFjxfWyDRvBDVI+C8pvVkgq

move the public key to usb-dongle?
move by showing qr code?





*** configure-yubikey

https://github.com/drduh/YubiKey-Guide#configure-yubikey


#+begin_src text
sudo systemctl stop pcscd
#+end_src


#+begin_src shell :session test-session :results verbatim
gpg --card-status
#+end_src

#+RESULTS:
: gpg: selecting card failed: No such device
: gpg: OpenPGP card not available: No such device








#+begin_src text
#+end_src








